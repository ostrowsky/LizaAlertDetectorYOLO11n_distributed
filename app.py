import os
import logging
import io
import aiohttp
import asyncio
from datetime import datetime
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
TG_TOKEN = os.getenv("TG_TOKEN")
HF_URL = os.getenv("HF_URL")

if not TG_TOKEN or not HF_URL:
    raise RuntimeError("TG_TOKEN –∏/–∏–ª–∏ HF_URL –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã")

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
)

# === Telegram Bot Handlers ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.info(f"/start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    await update.message.reply_text("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")

async def handle_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        photo = update.message.photo[-1]
        file = await photo.get_file()
        image_bytes = await file.download_as_bytearray()
        logging.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç {update.effective_user.id}, —Ä–∞–∑–º–µ—Ä {len(image_bytes)} –±–∞–π—Ç")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Hugging Face
        async with aiohttp.ClientSession() as session:
            form = aiohttp.FormData()
            form.add_field("image", io.BytesIO(image_bytes), filename="image.jpg", content_type="image/jpeg")

            async with session.post(HF_URL, data=form) as resp:
                if resp.status != 200:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ HF: –∫–æ–¥ {resp.status}")
                    await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ (HF –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω).")
                    return

                result_bytes = await resp.read()
                logging.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç HF, —Ä–∞–∑–º–µ—Ä {len(result_bytes)} –±–∞–π—Ç")
                await update.message.reply_photo(photo=io.BytesIO(result_bytes))

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞.")

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    doc = update.message.document
    if not doc.mime_type or not doc.mime_type.startswith("image/"):
        await update.message.reply_text("‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return

    try:
        file = await doc.get_file()
        image_bytes = await file.download_as_bytearray()
        logging.info(f"üìÑ –ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç {update.effective_user.id}, —Ä–∞–∑–º–µ—Ä {len(image_bytes)} –±–∞–π—Ç")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ HF
        async with aiohttp.ClientSession() as session:
            form = aiohttp.FormData()
            form.add_field("image", io.BytesIO(image_bytes), filename="document.jpg", content_type="image/jpeg")

            async with session.post(HF_URL, data=form) as resp:
                if resp.status != 200:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ HF (document): –∫–æ–¥ {resp.status}")
                    await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ (HF –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω).")
                    return

                result_bytes = await resp.read()
                logging.info(f"‚úÖ –û—Ç–≤–µ—Ç HF (document), —Ä–∞–∑–º–µ—Ä {len(result_bytes)} –±–∞–π—Ç")
                await update.message.reply_photo(photo=io.BytesIO(result_bytes))

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞.")

async def handle_other(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

    application = ApplicationBuilder().token(TG_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.PHOTO, handle_image))
    application.add_handler(MessageHandler(filters.Document.IMAGE, handle_document))
    application.add_handler(MessageHandler(~(filters.PHOTO | filters.Document.IMAGE), handle_other))

    logging.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.")
    await application.run_polling()

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()

    asyncio.run(main())
